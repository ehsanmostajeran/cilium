#!/bin/bash
set -e

dir="$(dirname "$0")"
$dir/config.sh

case "$1" in
    --wait)
      WAIT=1
      ;;
    --quiet)
      QUIET=1
      shift
      ;;
esac

IFNAME=$1
if [ "$2" == "-i" ]; then
  CONTAINER_IFNAME=$3
  shift 2
else
  CONTAINER_IFNAME=eth1
fi

NSPID=$2
GUESTNAME=$3
IPADDR=$4
GRP=$5
BD=$6
NS=$7
MACADDR=$8
ROUTES=$9

if [ "$MACADDR" = "auto" ]; then
	MACADDR=""
fi

if echo $MACADDR | grep -q @
then
  VLAN=$(echo $MACADDR | cut -d@ -f2)
  MACADDR=$(echo $MACADDR | cut -d@ -f1)
else
  VLAN=
fi

[ "$WAIT" ] && {
  while ! grep -q ^1$ /sys/class/net/$CONTAINER_IFNAME/carrier 2>/dev/null
  do sleep 1
  done
  exit 0
}

[ "$IPADDR" ] || {
    echo "Syntax:"
    echo "pipework [options] <hostinterface> [-i containerinterface] <guest> <ipaddr>/<subnet>[@default_gateway] [macaddr][@vlan]"
    echo "pipework [options] <hostinterface> [-i containerinterface] <guest> dhcp [macaddr][@vlan]"
    echo "pipework --wait"
    echo
    echo " Options:"
    echo "    --quiet                 Do not print warnings, only fatal errors"
    echo
    exit 1
}

# First step: determine type of first argument (bridge, physical interface...)
IFTYPE=bridge
BRTYPE=openvswitch

if [ "$IPADDR" = "dhcp" ]
then
    # Check for first available dhcp client
    DHCP_CLIENT_LIST="udhcpc dhcpcd dhclient"
    for CLIENT in $DHCP_CLIENT_LIST; do
        which $CLIENT >/dev/null && {
            DHCP_CLIENT=$CLIENT
            break
        }
    done
    [ -z $DHCP_CLIENT ] && {
        echo "You asked for DHCP; but no DHCP client could be found."
        exit 1
    }
else
    # Check if a subnet mask was provided.
    echo $IPADDR | grep -q / || {
        echo "The IP address should include a netmask."
        echo "Maybe you meant $IPADDR/24 ?"
        exit 1
    }
    # Check if a gateway address was provided.
    if echo $IPADDR | grep -q @
    then
        GATEWAY=$(echo $IPADDR | cut -d@ -f2)
        IPADDR=$(echo $IPADDR | cut -d@ -f1)
    else
        GATEWAY=
    fi
fi

[ ! -d /var/run/netns ] && mkdir -p /var/run/netns
[ -f /var/run/netns/$NSPID -o -L /var/run/netns/$NSPID ] && rm -f /var/run/netns/$NSPID
ln -s /proc/$NSPID/ns/net /var/run/netns/$NSPID

LOCAL_IFNAME=pl$NSPID$CONTAINER_IFNAME
GUEST_IFNAME=pg$NSPID$CONTAINER_IFNAME
ip link add name $LOCAL_IFNAME type veth peer name $GUEST_IFNAME
ovs-vsctl add-port $IFNAME $LOCAL_IFNAME ${VLAN:+"tag=$VLAN"}
ip link set $LOCAL_IFNAME up

ip link set $GUEST_IFNAME netns $NSPID
ip netns exec $NSPID ip link set $GUEST_IFNAME name $CONTAINER_IFNAME
[ "$MACADDR" ] && ip netns exec $NSPID ip link set $CONTAINER_IFNAME address $MACADDR
MACADDR=$(ip netns exec $NSPID ip link show $CONTAINER_IFNAME | grep ether | cut -d' ' -f6)

if [ "$IPADDR" = "dhcp" ]
then
    [ $DHCP_CLIENT = "udhcpc"  ] && ip netns exec $NSPID $DHCP_CLIENT -qi $CONTAINER_IFNAME
    [ $DHCP_CLIENT = "dhclient"  ] && ip netns exec $NSPID $DHCP_CLIENT $CONTAINER_IFNAME
    [ $DHCP_CLIENT = "dhcpcd"  ] && ip netns exec $NSPID $DHCP_CLIENT -q $CONTAINER_IFNAME
else
    ip netns exec $NSPID ip addr add $IPADDR dev $CONTAINER_IFNAME
    [ "$GATEWAY" ] && {
        ip netns exec $NSPID ip route delete default >/dev/null 2>&1 && true
    }
    ip netns exec $NSPID ip link set $CONTAINER_IFNAME up
    [ "$GATEWAY" ] && {
        NEED_ROUTE=$(ip netns exec $NSPID ip route get $GATEWAY 2>&1 | grep unreachable) && true
        [ "$NEED_ROUTE" ] && {
                ip netns exec $NSPID ip route add $GATEWAY/32 dev $CONTAINER_IFNAME
        }
        ip netns exec $NSPID ip route replace default via $GATEWAY
    }
fi

IPADDR=$(echo $IPADDR | cut -d/ -f1)

# Give our ARP neighbors a nudge about the new interface
if which arping > /dev/null 2>&1
then
    ip netns exec $NSPID arping -c 1 -A -I $CONTAINER_IFNAME $IPADDR > /dev/null 2>&1
else
    [ -z "$QUIET" ] && echo "Warning: arping not found; interface may not be immediately reachable"
fi

[ "$ROUTES" ] && {
    ip netns exec $NSPID ip route replace $ROUTES
}

$dir/add-local-endpoint.sh $LOCAL_IFNAME $GRP $BD $NS $IPADDR $MACADDR $GUESTNAME

echo $LOCAL_IFNAME $MACADDR $IPADDR $GRP $BD $NS end

exit 0
